name: IBM i build new release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  ssh_command: ssh ${{ secrets.IBMI_BUILD_USRPRF }}@${{ secrets.IBMI_BUILD_SYS }}
  scp_dist_command: scp ${{ secrets.IBMI_BUILD_USRPRF }}@${{ secrets.IBMI_BUILD_SYS }}:/home/${{ secrets.IBMI_BUILD_USRPRF }}/build/${{ github.sha }}/manzan-installer-${{ github.ref_name }}.jar .
  remote_build_dir: /home/${{ secrets.IBMI_BUILD_USRPRF }}/build/${{ github.sha }}
  rsync_command: rsync -a --exclude='./.*' --exclude='./runners' --exclude='./.git' --exclude='./docs' --rsync-path=/QOpenSys/pkgs/bin/rsync ./ ${{ secrets.IBMI_BUILD_USRPRF }}@${{ secrets.IBMI_BUILD_SYS }}:/home/${{ secrets.IBMI_BUILD_USRPRF }}/build/${{ github.sha }}/

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-node@v4
      with:
        always-auth: true
        node-version: 18

    - run: npm i -g @ibm/ibmi-ci

    - name: Get short SHA ID
      run: |
        echo "short_sha=$(echo ${{ github.sha }} | head -c 5)" >> $GITHUB_ENV
        cat $GITHUB_ENV

    - name: Deploy to IBM i
      run: | 
        ici \
          --cmd "mkdir -p '$remote_build_dir'" \
          --rcwd "$remote_build_dir" \
          --push "." \
          --cmd "/QOpenSys/pkgs/bin/gmake --jobs=1 manzan-installer-${{ github.ref_name }}.jar" \
          --get "manzan-installer-${{ github.ref_name }}.jar" \
          --ignore --cl "dltlib MANZANBLD" \
          --ignore --cl "dltlib MANZAN" \
          --rcwd ".." \
          --ignore --cmd "rm -fr $remote_build_dir"
          --cmd "rm -fr /QOpenSys/etc/manzan /opt/manzan"
        
    - name: Create the release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload *SAVF to release
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./manzan-installer-${{ github.ref_name }}.jar
        asset_name: manzan-installer-${{ github.ref_name }}.jar
        asset_content_type: application/zip
